/* * Copyright (c) 2020 Ruslan Potekhin */package com.feedapp.app.ui.fragments.homeimport android.annotation.SuppressLintimport android.app.Activityimport android.app.ActivityManagerimport android.content.Contextimport android.content.DialogInterfaceimport android.content.Intentimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.*import androidx.appcompat.app.AlertDialogimport androidx.core.view.childrenimport androidx.fragment.app.FragmentActivityimport androidx.lifecycle.Observerimport androidx.lifecycle.ViewModelProviderimport com.feedapp.app.Rimport com.feedapp.app.data.interfaces.BasicOperationCallbackimport com.feedapp.app.data.interfaces.UserDeleteCallbackimport com.feedapp.app.data.models.BasicNutrientTypeimport com.feedapp.app.data.models.DataResponseStatusimport com.feedapp.app.data.models.MeasureTypeimport com.feedapp.app.data.models.localdb.LocalDBSAvailableimport com.feedapp.app.data.models.localdb.LocalDBUrisimport com.feedapp.app.data.models.prefs.SharedPrefsHelperimport com.feedapp.app.data.models.user.UserDeleteOperationimport com.feedapp.app.ui.activities.AboutActivityimport com.feedapp.app.util.isConnectedimport com.feedapp.app.util.showDialogimport com.feedapp.app.util.toastimport com.feedapp.app.util.toastLongimport com.feedapp.app.viewModels.Operationimport com.feedapp.app.viewModels.SettingsViewModelimport com.firebase.ui.auth.AuthUIimport dagger.android.support.DaggerFragmentimport kotlinx.android.synthetic.main.fragment_settings.*import kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport java.io.Fileimport java.util.*import javax.inject.Injectclass Settings : DaggerFragment() {    private val RC_SIGN_IN = 103    @Inject    lateinit var modelFactory: ViewModelProvider.Factory    private lateinit var viewModel: SettingsViewModel    @Inject    lateinit var spHelper: SharedPrefsHelper    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        // Inflate the layout for this fragment        return inflater.inflate(R.layout.fragment_settings, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        viewModel = activity?.run {            ViewModelProvider(this, modelFactory).get(SettingsViewModel::class.java)        } ?: throw Exception("Invalid Activity")        setViewListeners()        setObservers()    }    private fun setObservers() {        viewModel.toastDatabase.observe(viewLifecycleOwner, Observer { event ->            event.getContentIfNotHandled()                ?.let {                    when (it) {                        Operation.SUCCESS -> {                            toastSuccess()                        }                        Operation.FAILED -> {                            toastFail()                        }                    }                }        })        viewModel.toast.observe(viewLifecycleOwner, Observer { event ->            event.getContentIfNotHandled()                ?.let {                    when (it) {                        UserDeleteOperation.SUCCESS -> {                            activity?.toast(getString(R.string.toast_acc_deleted))                        }                        UserDeleteOperation.FAILED -> {                            activity?.toastLong(getString(R.string.error_dialog_deletion))                        }                        UserDeleteOperation.REAUTH -> {                            activity?.toast(getString(R.string.dialog_sign_in_again))                        }                    }                }        })        viewModel.reauth.observe(viewLifecycleOwner, Observer { event ->            // if requires re-authentication, open auth activity            if (event.peekContent()) {                val providers = arrayListOf(                    AuthUI.IdpConfig.GoogleBuilder().build(),                    AuthUI.IdpConfig.FacebookBuilder().build(),                    AuthUI.IdpConfig.EmailBuilder().build()                )                // Create and launch sign-in intent                startActivityForResult(                    AuthUI.getInstance()                        .createSignInIntentBuilder()                        .setIsSmartLockEnabled(false, false)                        .setAvailableProviders(providers)                        .setLogo(R.drawable.icon)                        .build(),                    RC_SIGN_IN                )            }        })        viewModel.status.observe(viewLifecycleOwner, Observer {            when (it) {                DataResponseStatus.SUCCESS -> {                    toastSuccess()                    viewModel.status.postValue(DataResponseStatus.NONE)                }                DataResponseStatus.FAILED -> {                    toastFail()                    viewModel.status.postValue(DataResponseStatus.NONE)                }                else -> {                }            }        })    }    private fun setViewListeners() {        calories.setOnClickListener { showAmountDialog(BasicNutrientType.CALORIES) }        proteins.setOnClickListener { showAmountDialog(BasicNutrientType.PROTEINS) }        carbs.setOnClickListener { showAmountDialog(BasicNutrientType.CARBS) }        fats.setOnClickListener { showAmountDialog(BasicNutrientType.FATS) }        measure.setOnClickListener { showMeasureDialog() }        intolerance.setOnClickListener { if (spHelper.shouldShowCautionDialog()) showCautionDialog() else showIntoleranceDialog() }        diet.setOnClickListener { if (spHelper.shouldShowCautionDialog()) showCautionDialog() else showDietDialog() }        delete.setOnClickListener { showDeleteDialog() }        about.setOnClickListener { startAboutActivity() }        checkDatabase()    }    private fun checkDatabase() {        var code = getCountry()        val isAvailable =            LocalDBSAvailable.values().asList()                .find { code.contains(it.toString(), ignoreCase = true) } ?: return        code = isAvailable.toString()        useLocal.visibility = View.VISIBLE        useLocal.setOnClickListener { showDatabaseDialog(code) }    }    private fun getCountry(): String = Locale.getDefault().toLanguageTag()    private fun showDatabaseDialog(code: String) { var hasChanged = false        val dialogView =            View.inflate(requireContext(), R.layout.preference_database_dialog, null)        val rGroup = dialogView.findViewById<RadioGroup>(R.id.pref_radio_group)        val listener = View.OnClickListener {            hasChanged = true        }        rGroup.children.iterator().forEach { it.setOnClickListener(listener) }        val preferredCode = spHelper.getLocalSearchPreferred()        rGroup.findViewById<TextView>(R.id.pref_radio_local).text =            getString(R.string.database_local, code)        preferredCode?.let {            rGroup.check(R.id.pref_radio_local)        } ?: rGroup.check(R.id.pref_radio_default)        activity?.let { fa ->            context?.showDialog(                dialogView,                getString(R.string.dialog_settings_database_title),                null,                R.string.ok,                R.string.cancel,                DialogInterface.OnClickListener { _, _ ->                    // clear recent products history after changes                    if (hasChanged) viewModel.deleteRecentProducts()                    // save new value                    if (rGroup.findViewById<RadioButton>(R.id.pref_radio_local).isChecked) {                        val file = getLocalDBPath(fa, code)                        if (file == null) {                            toastFail()                            return@OnClickListener                        }                        spHelper.setLocalSearchPreferred(code)                        if (!file.exists()) {                            viewModel.downloadDatabase(                                file.path,                                code,                                object : BasicOperationCallback {                                    override fun onSuccess() {                                    }                                    override fun onFailure() {                                        spHelper.setLocalSearchPreferred(null)                                    }                                })                            return@OnClickListener                        }                        toastSuccess()                    } else {                        CoroutineScope(Dispatchers.Main).launch {                            if (spHelper.setLocalSearchPreferred(null))                                toastSuccess()                            else toastFail()                        }                    }                },                null            )        }    }    private fun getLocalDBPath(fa: FragmentActivity, code: String): File? {        val cacheDirPath = fa.cacheDir?.toString() ?: return null        val filePath = LocalDBUris.getDBPath(cacheDirPath, code)        return File(filePath)    }    private fun startAboutActivity() {        val intent = Intent(requireActivity(), AboutActivity::class.java)        startActivity(intent)    }    private fun showDeleteDialog() {        activity?.let {            it.showDialog(                null,                getString(R.string.delete_all),                getString(R.string.dialog_delete_data),                R.string.delete,                R.string.cancel,                DialogInterface.OnClickListener { _, _ ->                    if (!requireContext().isConnected()) it.toast(getString(R.string.check_internet_conn))                    else viewModel.deleteAllData(onDeletionSuccessListener)                },                null            )        }    }    private val onDeletionSuccessListener = object : UserDeleteCallback {        override fun onDeletionSuccess() {            try {                (requireContext().getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager)                    .clearApplicationUserData()            } catch (e: java.lang.Exception) {                e.printStackTrace()                activity?.toastLong(getString(R.string.error_dialog_deletion))            }        }        override fun onDeletionError() {}        override fun reauthRequired() {}    }    private fun showCautionDialog() {        activity?.let {            it.showDialog(                null,                getString(R.string.dialog_caution_diet_title),                getString(R.string.dialog_caution_diet_message),                R.string.ok,                R.string.cancel,                DialogInterface.OnClickListener { _, _ -> spHelper.saveShowedCautionDialog() },                null            )        }    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        when (requestCode) {            RC_SIGN_IN -> {                if (resultCode == Activity.RESULT_OK) {                    viewModel.deleteAllData(onDeletionSuccessListener)                } else {                    toastFail()                }            }        }    }    private fun showIntoleranceDialog() {        try {            val intoleranceArray = resources.getStringArray(R.array.Intolerance)            viewModel.user.value?.let { user ->                val dialogView =                    View.inflate(requireContext(), R.layout.preference_intolerance_dialog, null)                val container =                    dialogView.findViewById<RelativeLayout>(R.id.pref_intolerance_container)                // display initial values                val userIntolerance = user.intolerance ?: listOf()                container.children.forEach { view ->                    if (view is CheckBox && userIntolerance.find { it == view.text }                            ?.isNotEmpty() == true)                        view.isChecked = true                }                activity?.let {                    AlertDialog.Builder(requireActivity())                        .setTitle(getString(R.string.intolerance))                        .setPositiveButton(getString(R.string.ok)) { _, _ ->                            val intolerance = arrayListOf<String>()                            // get checked checkboxes and put it's correlating                            // intolerance value to array                            container.children.forEachIndexed { index, view ->                                if (view is CheckBox && view.isChecked) intolerance.add(                                    intoleranceArray[index]                                )                            }                            // update new intolerance                            viewModel.saveIntolerance(intolerance)                        }                        .setNegativeButton(R.string.cancel, null)                        .setView(dialogView)                        .show()                }            }        } catch (e: java.lang.Exception) {            e.printStackTrace()            toastFail()        }    }    private fun showDietDialog() {        try {            val dietArray = resources.getStringArray(R.array.Diet)            viewModel.user.value?.let { user ->                val dialogView =                    View.inflate(requireContext(), R.layout.preference_diet_dialog, null)                val container =                    dialogView.findViewById<RelativeLayout>(R.id.pref_diet_container)                // display initial values                val userDiet = user.diet ?: listOf()                container.children.forEach { view ->                    if (view is CheckBox && userDiet.find { it == view.text }                            ?.isNotEmpty() == true)                        view.isChecked = true                }                activity?.let {                    AlertDialog.Builder(requireActivity())                        .setTitle(getString(R.string.intolerance))                        .setPositiveButton(getString(R.string.ok)) { _, _ ->                            val intolerance = arrayListOf<String>()                            // get checked checkboxes and put it's correlating                            // diet value to array                            container.children.forEachIndexed { index, view ->                                if (view is CheckBox && view.isChecked) intolerance.add(                                    dietArray[index]                                )                            }                            // update new intolerance                            viewModel.saveDiet(intolerance)                        }                        .setNegativeButton(R.string.cancel, null)                        .setView(dialogView)                        .show()                }            }        } catch (e: java.lang.Exception) {            e.printStackTrace()            toastFail()        }    }    private fun showMeasureDialog() {        viewModel.user.value?.let {            val dialogView =                View.inflate(requireContext(), R.layout.preference_measure_dialog, null)            val rGroup = dialogView.findViewById<RadioGroup>(R.id.pref_radio_group)            // display relevant measure value            if (it.measureType == MeasureType.METRIC)                rGroup.check(R.id.pref_radio_metric)            else rGroup.check(R.id.pref_radio_us)            activity?.let {                AlertDialog.Builder(requireActivity())                    .setTitle(getString(R.string.measure_system))                    .setPositiveButton(getString(R.string.ok)) { _, _ ->                        // save new value                        viewModel.saveMeasure(rGroup.checkedRadioButtonId == R.id.pref_radio_metric)                    }                    .setNegativeButton(R.string.cancel, null)                    .setView(dialogView)                    .show()            }        }    }    @SuppressLint("DefaultLocale")    private fun showAmountDialog(nutrient: BasicNutrientType) {        val dialogView = View.inflate(requireContext(), R.layout.preference_amount_dialog, null)        val edtText = dialogView.findViewById<EditText>(R.id.edt_value)        edtText.setText(viewModel.getNutrientValue(nutrient))        activity?.let {            AlertDialog.Builder(requireActivity())                .setTitle(nutrient.toString().toLowerCase().capitalize())                .setPositiveButton(getString(R.string.ok)) { _, _ ->                    viewModel.saveNewValue(edtText.text.toString(), nutrient)                }                .setNegativeButton(R.string.cancel, null)                .setView(dialogView)                .show()        }    }    private fun toastSuccess() {        activity?.toast(getString(R.string.saved_success))    }    private fun toastFail() {        activity?.toast(getString(R.string.saved_failed))    }}